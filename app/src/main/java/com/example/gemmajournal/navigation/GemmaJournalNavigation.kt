package com.example.gemmajournal.navigation

import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.navigation.NavHostController
import androidx.navigation.NavType
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.navArgument
import com.example.gemmajournal.data.JournalDatabase
import com.example.gemmajournal.data.JournalRepository
import com.example.gemmajournal.ai.AIService
import com.example.gemmajournal.ui.newentry.NewEntryScreen
import com.example.gemmajournal.ui.newentry.NewEntryViewModel
import com.example.gemmajournal.ui.reflection.ReflectionScreen
import com.example.gemmajournal.ui.reflection.ReflectionViewModel
import com.example.gemmajournal.ui.memory.MemoryRecallScreen
import com.example.gemmajournal.ui.memory.MemoryRecallViewModel
import com.example.gemmajournal.ui.timeline.TimelineScreen
import com.example.gemmajournal.ui.timeline.TimelineViewModel

@Composable
fun GemmaJournalNavigation(
    navController: NavHostController,
    database: JournalDatabase,
    modifier: Modifier = Modifier
) {
    val repository = JournalRepository(database.journalDao())
    val aiService = AIService()
    
    NavHost(
        navController = navController,
        startDestination = NavRoutes.NewEntry.route,
        modifier = modifier
    ) {
        composable(NavRoutes.NewEntry.route) {
            val viewModel = NewEntryViewModel(repository, aiService)
            NewEntryScreen(
                viewModel = viewModel,
                onNavigateToReflection = { entry ->
                    // Navigate to reflection with the new entry
                    navController.navigate(NavRoutes.Reflection.createRoute(entry.id))
                }
            )
        }
        
        composable(
            route = NavRoutes.Reflection.route,
            arguments = listOf(
                navArgument("entryId") { type = NavType.LongType }
            )
        ) { backStackEntry ->
            val entryId = backStackEntry.arguments?.getLong("entryId") ?: 0L
            val viewModel = ReflectionViewModel(repository)
            
            // For now, we'll pass a placeholder entry
            // In a real app, you'd fetch the entry by ID
            val placeholderEntry = com.example.gemmajournal.data.JournalEntry(
                id = entryId,
                content = "Sample journal entry",
                reflection = "This is a sample reflection generated by AI.",
                mood = "Neutral",
                tags = listOf("Sample", "Test")
            )
            
            ReflectionScreen(
                entry = placeholderEntry,
                viewModel = viewModel,
                onNavigateToNewEntry = {
                    navController.navigate(NavRoutes.NewEntry.route) {
                        popUpTo(NavRoutes.NewEntry.route) { inclusive = true }
                    }
                },
                onNavigateToMemoryRecall = {
                    navController.navigate(NavRoutes.MemoryRecall.route)
                },
                onNavigateToTimeline = {
                    navController.navigate(NavRoutes.Timeline.route)
                }
            )
        }
        
        composable(NavRoutes.MemoryRecall.route) {
            val viewModel = MemoryRecallViewModel(repository, aiService)
            MemoryRecallScreen(
                viewModel = viewModel,
                onNavigateToNewEntry = {
                    navController.navigate(NavRoutes.NewEntry.route) {
                        popUpTo(NavRoutes.NewEntry.route) { inclusive = true }
                    }
                },
                onNavigateToTimeline = {
                    navController.navigate(NavRoutes.Timeline.route)
                }
            )
        }
        
        composable(NavRoutes.Timeline.route) {
            val viewModel = TimelineViewModel(repository)
            TimelineScreen(
                viewModel = viewModel,
                onNavigateToNewEntry = {
                    navController.navigate(NavRoutes.NewEntry.route) {
                        popUpTo(NavRoutes.NewEntry.route) { inclusive = true }
                    }
                },
                onNavigateToReflection = { entry ->
                    navController.navigate(NavRoutes.Reflection.createRoute(entry.id))
                }
            )
        }
    }
} 